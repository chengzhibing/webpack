http://www.runoob.com/w3cnote/webpack-tutorial.html(链接地址)；
步骤：1、全局安装webpack，webpack-dev-server；（前提已经安装了node.js npm）目录安装webpack 
  2、创建目录：mkdir app(app为文件夹名)；
  3、根目录下创建webpack.config.js（默认使用当前目录的webpack.config.js作为配置文件。如果要指定另外的配置文件，可以执行：webpack --config webpack.custom.config.js）
  4、打开webpack.config.js，配置文件；


		var webpack=require("webpack");


		module.exports={
			entry:"./index.js",//入口文件，数组中的所有文件会打包生成一个filename文件
			output:{
				path:__dirname,//其中参数path是指文件的绝对路径，publicPath是指访问路径，filename是指输出的文件名。
				filename:"bandle.js"输出文件的名字
			},
			module:{
				loaders:[
				  {test:/\.css$/,loader:"style-loader!css-loader"}//编译css的内置插件
				]
			},
			plugins:[
		        new webpack.BannerPlugin("webpack 实例练习")//加载webpack功能插件
			]
		}




  5、执行webpack-dev-server --progress --colors执行实时监听并用带颜色的进度条显示编译进度；
  /////////////////////////////////
    当项目逐渐变大，webpack 的编译时间会变长，可以通过参数让编译的输出内容带有进度和颜色。
	$webpack --progress --colors
	如果不想每次修改模块后都重新编译，那么可以启动监听模式。开启监听模式后，没有变化的模块会在编译后缓存到内存中，而不会每次都被重新编译，所以监听模式的整体速度是很快的。
	webpack --progress --colors --watch
	当然，我们可以使用 webpack-dev-server 开发服务，这样我们就能通过 localhost:8080 启动一个 express 静态资源 web 服务器，并且会以监听模式自动运行 webpack，在浏览器打开 http://localhost:8080/ 或 http://localhost:8080/webpack-dev-server/ 可以浏览项目中的页面和编译后的资源输出，并且通过一个 socket.io 服务实时监听它们的变化并自动刷新页面。
	# 安装
	cnpm install webpack-dev-server -g
	 
	# 运行
	webpack-dev-server --progress --colors
///////////////////////////////////////////

6、webpack的使用和browserify有些类似，下面列举几个常用命令：

webpack最基本的启动webpack命令
webpack -w提供watch方法，实时进行打包更新
webpack -p对打包后的文件进行压缩
webpack -d提供SourceMaps，方便调试
webpack --colors输出结果带彩色，比如：会用红色显示耗时较长的步骤
webpack --profile输出性能数据，可以看到每一步的耗时
webpack --display-modules默认情况下 node_modules 下的模块会被隐藏，加上这个参数可以显示这些被隐藏的模块
前面的四个命令比较基础，使用频率会比较大，后面的命令主要是用来定位打包时间较长的原因，方便改进配置文件，提高打包效率。




7、开发中需要将多个页面的公用模块独立打包，从而可以利用浏览器缓存机制来提高页面加载效率，减少页面初次加载时间，只有当某功能被用到时，才去动态的加载。这就需要使用webpack中的CommonsChunkPlugin插件。具体配置如下：

var CommonsChunkPlugin = require("webpack/lib/optimize/CommonsChunkPlugin");
module.exports = {
  entry: { a: "./a", b: "./b" },////支持字符串，数组，对象格式
  output: { filename: "[name].js" },//////此处的[name]为antry对象的键名
  plugins: [ new CommonsChunkPlugin("common.js") ]
}
在文件中根据下面的方式引用即可。

<script src="common.js"></script>
<script src="a.js"></script>
<script src="b.js"></script>



8、在webpack中JavaScript，CSS，LESS，TypeScript，JSX，CoffeeScript，图片等静态文件都是模块，不同模块的加载是通过模块加载器（webpack-loader）来统一管理的。loaders之间是可以串联的，一个加载器的输出可以作为下一个加载器的输入，最终返回到JavaScript上。loader的配置可以写在配置文件中，通过正则表达式的方式对文件进行匹配，具体可参见下面的示例：

module: {
	loaders: [{
		test: /\.less/,
		loader:  'style-loader!css-loader!less-loader'
	}, {
	  test: /\.(png|jpg)$/,
	  loader: 'url-loader?limit=10000&name=build/[name].[ext]'
	}]
}
loader也支持在js文件中通过require的方式进行加载，只需要在require资源path的前面指定loader，用！来串联不同的loader和资源即可。

require(“style!css!less!./mystyles.less”);


9、css文件独立打包
在webpack中编写js文件时，可以通过require的方式引入其他的静态资源，可通过loader对文件自动解析并打包文件。通常会将js文件打包合并，css文件会在页面的header中嵌入style的方式载入页面。但开发过程中我们并不想将样式打在脚本中，最好可以独立生成css文件，以外链的形式加载。这时extract-text-webpack-plugin插件可以帮我们达到想要的效果。需要使用npm的方式加载插件，然后参见下面的配置，就可以将js中的css文件提取，并以指定的文件名来进行加载。

npm install extract-text-webpack-plugin –save-dev
plugins: [
    new ExtractTextPlugin('styles.css')
]

10、图片打包
webpack中对于图片的处理，可以通过url-loader来实现图片的压缩。

div.img{
	background: url(../image/xxx.jpg)
}
//或者
var img = document.createElement("img");
img.src = require("../image/xxx.jpg");
document.body.appendChild(img);
针对上面的两种使用方式，loader可以自动识别并处理。根据loader中的设置，webpack会将小于指点大小的文件转化成 base64 格式的 dataUrl，其他图片会做适当的压缩并存放在指定目录中。

module: {
    {
      test: /\.(png|jpg)$/,
      loader: 'url-loader?limit=10000&name=build/[name].[ext]'
    }]
}
对于上面的配置，如果图片资源小于10kb就会转化成 base64 格式的 dataUrl，其他的图片会存放在build/文件夹下。

11、webpack-dev-server 静态资源服务器
webpack除了可以对模块进行打包，还提供了一个开发服务器。它的特点是：

基于Node.js Express框架的轻量开发服务器
静态资源Web服务器
开发中会监听文件的变化在内存中实时打包
webpack-dev-server需要单独安装，命令如下：

npm install -g webpack-dev-server
可以使用webpack-dev-server直接启动，也可以增加参数来获取更多的功能，具体配置可以参见 官方文档 。默认启动端口8080，通过localhost:8080/webpack-dev-server/可以访问页面，文件修改后保存时会在页面头部看到sever的状态变化，并且会进行热替换，实现页面的自动刷新。

12、双服务器模式
项目开发中，仅有一台静态服务器是不能满足需求的，我们需要另启一台web服务器，且将静态服务器集成到web服务器中，就可以使用webpack的打包和加载功能。我们只需要修改一下配置文件就可以实现服务器的集成。

 entry: [
    './src/page/main.js',
    'webpack/hot/dev-server',
    'webpack-dev-server/client?http://127.0.0.1:8080'
  ]
  output: {
    path: __dirname,
    filename: '[name].js',
    publicPath: "http://127.0.0.1:8080/assets/"
  }
  plugins: [
    new webpack.HotModuleReplacementPlugin()
  ]
如果在开发中启动两个服务器并不是一个很好地选择，webpack提供了一个中间件webpack-dev-middleware，但其只能在生产环境中使用，可以实现在内存中实时打包生成虚拟文件，供浏览器访问以及调试。使用方式如下：

var webpackDevMiddleware = require("webpack-dev-middleware");
var webpack = require("webpack");
var compiler = webpack({
	// configuration
	output: { path: '/' }
});
app.use(webpackDevMiddleware(compiler, {
	// options
}));

13、webpack 提供了强大的 loader 机制和 plugin 机制，loader 机制支持载入各种各样的静态资源，不只是 js 脚本、连 html, css, images 等各种资源都有相应的 loader 来做依赖管理和打包；而 plugin 则可以对整个 webpack 的流程进行一定的控制。